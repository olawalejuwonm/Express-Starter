import express, { Request, Response } from 'express';
import {
  canCreate{{fcapitalize name}},
  canDelete{{fcapitalize name}},
  canFetch{{fcapitalize name}},
  canUpdate{{fcapitalize name}},
} from './guard';
import {{fcapitalize name}}Service from './service';
import response, {
  throwIfError,
  throwPermIfError,
} from '../../utilities/response';
import { validateDTO } from '../../middlewares/validate';
import { Create{{fcapitalize name}}Dto, Update{{fcapitalize name}}Dto } from './dto';

const router = express.Router();

router.post('/', async (req: Request, res: Response) => {
  const perm = throwPermIfError(await canCreate{{fcapitalize name}}(req, true));
  const payload = validateDTO(Create{{fcapitalize name}}Dto, req.body);
  const content = throwIfError(
    await {{fcapitalize name}}Service.create(payload, {
      ...perm.query,
    }),
  );
  return response(res, content.statusCode, content.message, content.data);
});

router.get('/', async (req: Request, res: Response) => {
  const perm = throwPermIfError(await canFetch{{fcapitalize name}}(req, false));
  const content = throwIfError(
    await {{fcapitalize name}}Service.fetch(req.query, {
      ...perm.query,
    }),
  );
  return response(res, content.statusCode, content.message, content.data);
});

router.get('/:id', async (req: Request, res: Response) => {
  const perm = throwPermIfError(await canFetch{{fcapitalize name}}(req, false));
  const content = throwIfError(
    await {{fcapitalize name}}Service.fetchOne(req.query, {
      _id: req.params.id,
      ...perm.query,
    }),
  );
  return response(res, content.statusCode, content.message, content.data);
});

router.put('/:id', async (req: Request, res: Response) => {
  const body = validateDTO(Update{{fcapitalize name}}Dto, req.body);

  const perm = throwPermIfError(await canUpdate{{fcapitalize name}}(req, false));
  const content = throwIfError(
    await {{fcapitalize name}}Service.updateOne({ _id: req.params.id, ...perm.query }, body),
  );
  return response(res, content.statusCode, content.message, content.data);
});

router.delete('/:id', async (req: Request, res: Response) => {
  const perm = throwPermIfError(await canDelete{{fcapitalize name}}(req, false));
  const content = throwIfError(
    await {{fcapitalize name}}Service.deleteOne(req.params.id, {
      ...perm.query,
    }),
  );
  return response(res, content.statusCode, content.message, content.data);
});

export default router;
